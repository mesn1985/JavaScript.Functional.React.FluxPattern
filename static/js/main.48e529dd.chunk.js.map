{"version":3,"sources":["constants/Messages.js","constants/defaultState.js","helpers/DateHelper.js","reducers/Reducer.js","constants/actionConstants.js","actions/select_city_predicate_action.js","actions/fetch_weather_data_actions.js","models/fetch/WeatherForecastService.js","models/fetch/WeatherHistoryService.js","constants/dataType.js","helpers/WeatherDataFilterHelper.js","actionCreators/weatherDataFetch.js","constants/cities.js","constants/options.js","components/Select_City_Predicate_component.js","actions/select_from_date_action.js","components/DatePicker_From_component.js","actions/select_to_date_action.js","components/DatePicker_To_component.js","components/History_component.js","components/TwentyFour_Hour_Predictions_component.js","helpers/InputModelHelper.js","components/submit_history_component.js","components/Latest_component.js","App.js","serviceWorker.js","index.js","store.js","models/common/DateInterval.js","models/common/WeatherData.js","models/common/WeatherPrediction.js","models/common/WeatherHistory.js","models/common/Temprature.js","models/common/DataAndEvent.js","models/common/Precipitation.js","models/common/Wind.js","models/common/CloudCoverage.js","models/common/TempraturePrediction.js","models/common/PrecipitationPrediction.js","models/common/WindPrediction.js","models/common/WeatherForeCast.js","models/common/CloudCoveragePrediction.js"],"names":["dataMessageStrings","noDataFound","noDataTextString","initialState","city","fromDate","date","Date","setHours","setDate","getDate","get5DaysEarlier","toDate","getToday","twentyFourHoursPredicitions","history","highstTemp","lowstTemp","totalPrecip","dominantWindDirection","avgCloudCov","latestData","cloud","precition","wind","temprature","isLoadingData","hasError","state","defaultState","action","type","latest","selectCityAction","selectedCity","weatherFetchHasError","bool","weatherFetchLoading","weatherFetchSucced","predictions","filteredInterval","WeatherForecast","require","fetch","TempraturePrediction","WindPrediction","PrecipitationPrediction","CloudCovaragePrediction","root","a","response","json","body","map","obj","isTemperatureObject","time","place","unit","from","to","isPrecipitationObject","precipitation_types","isWindObject","directions","isCloudCoverageObject","mapObjectToDomainModel","getWeatherForecast","fetchAllWeatherForecastData","then","result","WeatherHistory","Temperature","Wind","Precipitation","CloudCovarage","value","direction","addWeatherHistoryData","data","arr","push","method","JSON","stringify","headers","request","status","console","log","getWeatherHistory","fetchAllWeatherData","dataType","temperature","precipitation","nationalUnitOfMeasures","us","SI","create24HourPredictionObject","weatherPrediction","fromTemp","forPeriod","DateInterval","incrementDateWithOneHour","forType","avarageFromValue","toTemp","avarageToValue","fromCloud","toCloud","fromWind","toWind","fromPrecip","toPrecip","hour","toString","length","getHour","getHours","getTime","getObjectWithHighstDate","weatherHistory","reduce","LatestObj","currObj","filter","filterForInterval","interval","forPlace","tempHistoryArray","historyArray","Math","max","weather","isNaN","isFinite","getHighstTemprature","min","getLowstTemprature","acc","parseFloat","getTotalPrecipitation","windOccourences","prev","next","Object","keys","preVkey","nextKey","getDominantWindType","cloudArray","getAverageCloudCoverage","filterForLatestMeasureMents","filterFor24HoursPredictions","collect","i","getWeatherData","dispatch","getState","fetchActions","prediction","stateSnapShot","filteredPredcitions","filteredLatest","catch","e","alert","cities","Aarhus","Copenhagen","Horsens","historyTypeOptions","label","cityOptions","handleChange","cityAction","fetchAction","selectCity","connect","isLoading","fetchData","React","memo","id","className","isDisabled","onChange","options","selectFromDateAction","selectedDate","dateIsAfterTodate","fromdate","selectFromDate","fromDateAction","selectToDateAction","dateIsBefore","toDateAction","History","numberOfDays","round","parse","Table","scope","TwentyFourHours","now","items","entries","index","key","toDateString","striped","bordered","hover","size","getUnitSymbol","unitOfMeasure","getTempratureSymbol","getPrecipitationSymbol","getWindSymbol","handleSubmit","preventDefault","target","dateTime","submitHistory","onSubmit","name","required","Latest","App","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","reducer","applyMiddleware","thunk","configurationStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","this","dateInt","WeatherData","timeDate","placeString","typeString","unitString","valueNumeric","module","exports","WeatherPrediction","fromNumeric","toNumeric","weatherdata","Temprature","dataInputArray","dataArray","elm","dateInterval","contains","concat","forEach","element","constructor","convertToF","convertToInches","convertToMPH","convertToC","convertToMM","convertToMS","sort","b","Tempreature","DataAndEvent","directionString","CloudCoverage","typesStringArray","directionsStringArray","total","CloudCoveragePrediction"],"mappings":"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","file":"static/js/main.48e529dd.chunk.js","sourcesContent":["export const dataMessageStrings = {\r\n    noDataFound(){return \"No  Data\"}\r\n\r\n}","import {get5DaysEarlier,getToday } from '../helpers/DateHelper'\r\nimport {dataMessageStrings} from '../constants/Messages'\r\n\r\n const initialState = {\r\n    city:'Horsens',\r\n    fromDate: get5DaysEarlier(),\r\n    toDate: getToday(),\r\n    twentyFourHoursPredicitions: [],\r\n    history: {highstTemp:[noDataTextString()],lowstTemp:[noDataTextString()],totalPrecip:[noDataTextString()],dominantWindDirection:[noDataTextString()],avgCloudCov:'No Data'},\r\n    latestData: {cloud:[noDataTextString()], precition:[noDataTextString()], wind:[noDataTextString()],temprature:[noDataTextString()]},\r\n    isLoadingData:false,\r\n    hasError:false\r\n}\r\n\r\nfunction noDataTextString(){\r\n    return dataMessageStrings.noDataFound()\r\n}\r\n\r\nexport default initialState","/**\r\n * All dates have their time floored to excactly midnight\r\n */\r\n\r\nexport function get5DaysEarlier(){\r\n    let date = new Date()\r\n    date.setHours(0,0,0,0)\r\n    date.setDate(date.getDate()-5)\r\n    return date\r\n}\r\nexport function getToday(){\r\n     let date = new Date()\r\n     date.setHours(0,0,0,0)\r\n    return date\r\n}\r\nexport function daysBetween(from,to){\r\n    let timeDifference = Date.parse(to)-Date.parse(from)\r\n    return timeDifference/(1000 * 3600 * 24)\r\n}\r\nexport function isAdayOfThePast(input){\r\n        const inputtedTime = Date.parse(input.time)\r\n        \r\n        if(inputtedTime >= new Date().getTime())\r\n            return false\r\n            \r\n        return true\r\n    \r\n}\r\n","import * as actionConstants from '../constants/actionConstants'\r\nimport defaultState from '../constants/defaultState'\r\n\r\n\r\nexport default (state = defaultState, action) =>{\r\n    switch(action.type){\r\n            case actionConstants.selectCityActionConstant:\r\n                return {...state,city:action.city}\r\n            case actionConstants.selectFromDateActionConstant:\r\n                return {...state,fromDate:action.date}\r\n            case actionConstants.selectToDateActionConstant:\r\n                return {...state,toDate:action.date}\r\n            case actionConstants.weatherFetchErrorConstant:\r\n                return {...state, hasError:action.hasError, isLoadingData:action.isLoadingData}\r\n            case actionConstants.weatherFetchSuccedConstant:\r\n                    return {...state,\r\n                        twentyFourHoursPredicitions:action.twentyFourHoursPredicitions,\r\n                        isLoadingData:false, \r\n                        latestData:action.latest,\r\n                        history:action.history\r\n                    }\r\n            case actionConstants.weatherFetchLoadingConstant:\r\n                    return {...state,isLoadingData:action.isLoadingData}\r\n            default:\r\n                return state\r\n    }\r\n}","export const selectCityActionConstant = 'selectCity'\r\nexport const selectFromDateActionConstant = 'selectFromDate'\r\nexport const selectToDateActionConstant = 'selectToDate'\r\nexport const weatherFetchErrorConstant = 'weatherFetchErrorConstant'\r\nexport const weatherFetchSuccedConstant = 'weatherFetchSuccedConstant'\r\nexport const weatherFetchLoadingConstant = 'weatherFetchLoadingConstant'\r\n\r\n","import {selectCityActionConstant} from '../constants/actionConstants' \r\n\r\nconst selectCityAction = (selectedCity) => () => {\r\n    return {type:selectCityActionConstant, city:selectedCity}\r\n}\r\nexport default selectCityAction","import {weatherFetchErrorConstant,weatherFetchSuccedConstant,weatherFetchLoadingConstant} from '../constants/actionConstants'\r\n\r\nexport const weatherFetchHasError = (bool)=>{\r\n    return{\r\n            type:weatherFetchErrorConstant, hasError:bool,isLoadingData:false\r\n            }\r\n}\r\nexport const weatherFetchLoading = (bool)=>{\r\n    return{\r\n            type:weatherFetchLoadingConstant,isLoadingData:bool\r\n    }\r\n}\r\nexport const weatherFetchSucced = (predictions,latest,filteredInterval)=>{\r\n    return{\r\n            type:weatherFetchSuccedConstant,twentyFourHoursPredicitions:predictions,latest:latest,history:filteredInterval\r\n    }\r\n}","const WeatherForecast = require('../common/WeatherForeCast')\r\nconst fetch = require('node-fetch')\r\nconst TempraturePrediction = require('../common/TempraturePrediction')\r\nconst WindPrediction = require('../common/WindPrediction')\r\nconst PrecipitationPrediction = require('../common/PrecipitationPrediction')\r\nconst CloudCovaragePrediction = require('../common/CloudCoveragePrediction')\r\n\r\nconst root = 'http://localhost:8080/'\r\n\r\n//Entry point function\r\nfunction getWeatherForecast () {\r\n  return fetchAllWeatherForecastData()\r\n    .then(result => new WeatherForecast(result))\r\n}\r\n\r\nasync function fetchAllWeatherForecastData () {\r\n  const response = await fetch(root + 'forecast')\r\n  const body = await response.json()\r\n  return mapConententToDomainModel(body)\r\n}\r\n\r\nfunction mapConententToDomainModel (ArrayOfObjects) {\r\n  return ArrayOfObjects.map(obj => mapObjectToDomainModel(obj))\r\n}\r\n\r\nfunction mapObjectToDomainModel (obj) {\r\n  if (isTemperatureObject(obj)) {\r\n    return new TempraturePrediction(obj.time, obj.place, obj.type, obj.unit, obj.from, obj.to)\r\n  }\r\n  if (isPrecipitationObject(obj)) {\r\n    return new PrecipitationPrediction(obj.time, obj.place, obj.type, obj.unit, obj.from, obj.to, obj.precipitation_types)\r\n  }\r\n  if (isWindObject(obj)) {\r\n    return new WindPrediction(obj.time, obj.place, obj.type, obj.unit, obj.from, obj.to, obj.directions)\r\n  }\r\n  if (isCloudCoverageObject(obj)) {\r\n    return new CloudCovaragePrediction(obj.time, obj.place, obj.type, obj.unit, obj.from, obj.to)\r\n  }\r\n}\r\n\r\nfunction isPrecipitationObject (obj) {\r\n  return obj.type === 'precipitation'\r\n}\r\n\r\nfunction isWindObject (obj) {\r\n  return obj.type === 'wind speed'\r\n}\r\n\r\nfunction isCloudCoverageObject (obj) {\r\n  return obj.type === 'cloud coverage'\r\n}\r\n\r\nfunction isTemperatureObject (obj) {\r\n  return obj.type === 'temperature'\r\n}\r\n\r\n// Example\r\n// getWeatherForecast().then(i => console.log(i.forPlace(\"Horsens\").forType(\"temperature\").convertToUSUnits()))\r\n// getWeatherForecast().then(i => console.log(i.forPlace(\"Horsens\").forType(\"temperature\").convertToUSUnits().avarageFromValue()))\r\n// getWeatherForecast().then(i => console.log(i.forPlace(\"Horsens\").forType(\"temperature\").convertToUSUnits().avarageToValue()))\r\n// getWeatherForecast().then(i => console.log(i.forPlace(\"Horsens\").forType(\"cloud coverage\").convertToUSUnits().data()))\r\n\r\nexport default getWeatherForecast\r\n","const WeatherHistory = require('../common/WeatherHistory')\r\nconst fetch = require('node-fetch')\r\nconst Temperature = require('../common/Temprature')\r\nconst Wind = require('../common/Wind')\r\nconst Precipitation = require('../common/Precipitation')\r\nconst CloudCovarage = require('../common/CloudCoverage')\r\n\r\nconst root = 'http://localhost:8080/'\r\n\r\n//Entry point function\r\nfunction getWeatherHistory () {\r\n  return fetchAllWeatherData()\r\n    .then(result => new WeatherHistory(result))\r\n}\r\n\r\nasync function fetchAllWeatherData () {\r\n  const response = await fetch(root + 'data')\r\n  const body = await response.json()\r\n  return mapConententToDomainModel(body)\r\n}\r\nexport async function addWeatherHistoryData(data){\r\n  const arr = []\r\n  arr.push(data)\r\n  try{\r\n  const request = await fetch(root+'data', {\r\n    method: 'POST', \r\n    body: JSON.stringify(arr),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }})\r\n    const response = await request\r\n    if(response.status>=300||response.status<200){\r\n       return false\r\n    }\r\n    return true\r\n  }catch(e){\r\n    console.log('post failed:',e)\r\n    return false\r\n  }\r\n}\r\n\r\nfunction mapConententToDomainModel (ArrayOfObjects) {\r\n  return ArrayOfObjects.map(obj => mapObjectToDomainModel(obj))\r\n}\r\n\r\nfunction mapObjectToDomainModel (obj) {\r\n  if (isTemperatureObject(obj)) {\r\n    return new Temperature(obj.time, obj.place, obj.type, obj.unit, obj.value)\r\n  }\r\n  if (isPrecipitationObject(obj)) {\r\n    return new Precipitation(obj.time, obj.place, obj.type, obj.unit, obj.value)\r\n  }\r\n  if (isWindObject(obj)) {\r\n    return new Wind(obj.time, obj.place, obj.type, obj.unit, obj.value, obj.direction)\r\n  }\r\n  if (isCloudCoverageObject(obj)) {\r\n    return new CloudCovarage(obj.time, obj.place, obj.type, obj.unit, obj.value)\r\n  }\r\n}\r\n\r\nfunction isPrecipitationObject (obj) {\r\n  return obj.type === 'precipitation'\r\n}\r\n\r\nfunction isWindObject (obj) {\r\n  return obj.type === 'wind speed'\r\n}\r\n\r\nfunction isCloudCoverageObject (obj) {\r\n  return obj.type === 'cloud coverage'\r\n}\r\n\r\nfunction isTemperatureObject (obj) {\r\n  return obj.type === 'temperature'\r\n}\r\n\r\nexport default getWeatherHistory\r\n\r\n// Example\r\n// getWeatherHistory().then(i => console.log(i.forPlace(\"Horsens\").forType(\"temperature\").convertToUSUnits().lowestValue()))\r\n// getWeatherHistory().then(i => console.log(i.forPlace(\"Aarhus\").forType(\"precipitation\").convertToUSUnits().data()[0]))\r\n","export const dataType = {\r\n\r\n    temperature:'temperature',\r\n    precipitation:'precipitation',\r\n    wind:'wind speed',\r\n    cloud:'cloud coverage'\r\n}\r\n\r\nexport const nationalUnitOfMeasures = {\r\n        us:'US',\r\n        SI:'SI'\r\n}\r\n","import DateInterval from '../models/common/DateInterval'\r\nimport {dataType} from '../constants/dataType'\r\nimport {dataMessageStrings} from '../constants/Messages' \r\n\r\nconst filterForInterval = (state, weatherHistory) => {\r\n    const interval = new DateInterval(state.fromDate, state.toDate)\r\n\r\n    const history = weatherHistory.forPeriod(interval).forPlace(state.city)\r\n\r\n    const tempHistoryArray = history.forType(dataType.temperature).data()\r\n    const highstTemp = getHighstTemprature(tempHistoryArray)\r\n    const lowstTemp = getLowstTemprature(tempHistoryArray)\r\n    const totalPrecip = getTotalPrecipitation(history.forType(dataType.precipitation))\r\n    const dominantWindDirection = getDominantWindType(history.forType(dataType.wind))\r\n    const avgCloudCov = getAverageCloudCoverage(history.forType(dataType.cloud))\r\n\r\n    return {\r\n        highstTemp: highstTemp,\r\n        lowstTemp: lowstTemp,\r\n        totalPrecip: totalPrecip,\r\n        dominantWindDirection: dominantWindDirection,\r\n        avgCloudCov: avgCloudCov\r\n    }\r\n}\r\nfunction getHighstTemprature(historyArray){\r\n    const highstTemp = Math.max(...historyArray.map(weather => weather.value()))\r\n\r\n    if(isNaN(highstTemp)||!isFinite(highstTemp))\r\n        return  dataMessageStrings.noDataFound()\r\n    return highstTemp\r\n}\r\nfunction getLowstTemprature(historyArray){\r\n    const lowstTemp = Math.min(...historyArray.map(weather => weather.value()))\r\n\r\n    if(isNaN(lowstTemp)||!isFinite(lowstTemp))\r\n        return  dataMessageStrings.noDataFound()\r\n    return lowstTemp\r\n}\r\nfunction getTotalPrecipitation(history){\r\n    const totalPrecip = history\r\n    .data()\r\n    .reduce((acc, weather) => {\r\n        return acc + parseFloat(weather.value())\r\n    }, 0.0)\r\n\r\n    return totalPrecip\r\n}\r\nfunction getDominantWindType(history){\r\n    const windOccourences = history\r\n        .data()\r\n        .map(wind => wind.direction())\r\n        .reduce((prev, next) => {\r\n            prev[next] = (prev[next] + 1) || 1\r\n            return prev\r\n        }, { [ dataMessageStrings.noDataFound()]: 0 })\r\n    const dominantWindDirection = Object\r\n        .keys(windOccourences)\r\n        .reduce((preVkey, nextKey) => windOccourences[preVkey] > windOccourences[nextKey] ? preVkey : nextKey)\r\n    return dominantWindDirection\r\n}\r\nfunction getAverageCloudCoverage(history){\r\n    const cloudArray = history.data()\r\n    return  cloudArray\r\n            .reduce((acc, value) => { return acc + value.value() }, 0) / cloudArray.length || dataMessageStrings.noDataFound()\r\n}\r\nconst filterForLatestMeasureMents = (state, weatherHistory) => {\r\n    const city = state.city\r\n    const interval = new DateInterval(state.fromDate, state.toDate)\r\n    const history = weatherHistory.forPlace(city).forPeriod(interval)\r\n    const temp = getObjectWithHighstDate(history, dataType.temperature)\r\n    const precip = getObjectWithHighstDate(history, dataType.precipitation)\r\n    const wind = getObjectWithHighstDate(history, dataType.wind)\r\n    const cloud = getObjectWithHighstDate(history, dataType.cloud)\r\n\r\n    return { temprature: temp, precition: precip, wind: wind, cloud: cloud }\r\n}\r\nconst filterFor24HoursPredictions = (state, weatherPrediction) => {\r\n    const city = state.city\r\n    let fromDate = state.toDate\r\n    let collect = []\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        collect.push(create24HourPredictionObject(fromDate, weatherPrediction.forPlace(city)))\r\n        fromDate = incrementDateWithOneHour(fromDate)\r\n    }\r\n    return collect;\r\n}\r\n\r\nfunction create24HourPredictionObject(fromDate, weatherPrediction) {\r\n    const fromTemp = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.temperature).avarageFromValue()\r\n    const toTemp = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.temperature).avarageToValue()\r\n    const fromCloud = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.cloud).avarageFromValue()\r\n    const toCloud = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.cloud).avarageToValue()\r\n    const fromWind = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.wind).avarageFromValue()\r\n    const toWind = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.wind).avarageToValue()\r\n    const fromPrecip = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.precipitation).avarageFromValue()\r\n    const toPrecip = weatherPrediction\r\n        .forPeriod(new DateInterval(fromDate, incrementDateWithOneHour(fromDate)))\r\n        .forType(dataType.precipitation).avarageToValue()\r\n    const hour = getHour(fromDate.getHours())\r\n    return { hour: hour, toTemp: toTemp, fromTemp: fromTemp, toCloud: toCloud, fromCloud: fromCloud, fromWind: fromWind, toWind: toWind, fromPrecip: fromPrecip, toPrecip: toPrecip }\r\n}\r\nfunction getHour(hour) {\r\n    if (hour.toString().length < 2)\r\n        return '0' + hour\r\n    return hour\r\n}\r\n\r\nfunction incrementDateWithOneHour(date) {\r\n    return new Date(date.getTime() + 60 * 60 * 1000)\r\n}\r\n\r\nfunction getObjectWithHighstDate(weatherHistory, dataType) {\r\n    const history = weatherHistory.forType(dataType).data()\r\n\r\n    if (history.length === 0)\r\n        return  dataMessageStrings.noDataFound()\r\n\r\n    return weatherHistory\r\n        .forType(dataType)\r\n        .data()\r\n        .reduce((LatestObj, currObj) => LatestObj.time() > currObj.time() ? LatestObj : currObj).value()\r\n}\r\n\r\nconst filter = \r\n     {\r\n        filterForInterval:filterForInterval,\r\n        filterForLatestMeasureMents:filterForLatestMeasureMents, \r\n        filterFor24HoursPredictions:filterFor24HoursPredictions\r\n        }\r\n\r\nexport default filter","import * as fetchActions from '../actions/fetch_weather_data_actions'\r\nimport weatherPrediction from '../models/fetch/WeatherForecastService'\r\nimport weatherHistory from '../models/fetch/WeatherHistoryService'\r\nimport filter from '../helpers/WeatherDataFilterHelper'\r\n\r\nexport default function getWeatherData(action){\r\n    return (dispatch,getState) => {\r\n                dispatch(action())\r\n                dispatch(fetchActions.weatherFetchLoading(true))\r\n               \r\n            weatherPrediction().then(\r\n                    prediction =>{\r\n                        weatherHistory().then(\r\n                          history => {\r\n                            const stateSnapShot = getState()\r\n                            const filteredPredcitions =filter.filterFor24HoursPredictions(stateSnapShot,prediction)\r\n                            const filteredLatest = filter.filterForLatestMeasureMents(stateSnapShot,history)\r\n                            const filteredInterval = filter.filterForInterval(stateSnapShot,history)\r\n                            dispatch(fetchActions.weatherFetchSucced(filteredPredcitions,filteredLatest,filteredInterval))\r\n                            \r\n                          }\r\n                        )\r\n                    }\r\n                ).catch((e)=>{\r\n                        alert('Error Occoured, could not retrieve data from the server')\r\n                        dispatch(fetchActions.weatherFetchHasError(true))\r\n                })\r\n            }\r\n            }\r\n","const cities = \r\n            {\r\n                Aarhus:'Aarhus',\r\n                Copenhagen:'Copenhagen',\r\n                Horsens:'Horsens'\r\n            }\r\nexport default cities","import cities from '../constants/cities'\r\nimport {dataType,nationalUnitOfMeasures} from '../constants/dataType'\r\n\r\nexport const historyTypeOptions =  [\r\n    {value: dataType.temperature, label: 'temperature'},\r\n    {value: dataType.precipitation, label: 'precipitation'},\r\n    {value: dataType.wind, label: 'wind speed'},\r\n    {value: dataType.cloud, label: 'cloud coverage'}\r\n]\r\nexport const cityOptions =  [\r\n    {value: cities.Copenhagen, label: [cities.Copenhagen]},\r\n    {value: cities.Horsens, label: [cities.Horsens]},\r\n    {value: cities.Aarhus, label: [cities.Aarhus]},\r\n]\r\nexport const unit = [\r\n    {value:nationalUnitOfMeasures.SI,label:'SI'},\r\n    {value:nationalUnitOfMeasures.us,label:'US'}\r\n]","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport cityAction from '../actions/select_city_predicate_action'\r\nimport fetchData from '../actionCreators/weatherDataFetch'\r\nimport Select from 'react-select'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport {cityOptions} from '../constants/options'\r\n\r\nfunction predicate_select_component({cityAction,fetchAction,isLoading,city}){\r\n         return(\r\n                <div id = 'predicateSelectComponent' className='container'>\r\n                   <div className=\"row\">\r\n                   <div className=\"col-sm\">\r\n                   <h1>city:</h1>\r\n                    </div>\r\n                       <div className=\"col-sm\">\r\n                    <Select \r\n                        isDisabled = {isLoading}\r\n                        onChange={handleChange(cityAction,fetchAction)}\r\n                        className=\"mt-3 col-md-6 col-offset-4\"\r\n                        options={cityOptions}/>\r\n                        </div>\r\n                   </div>\r\n                </div>\r\n        )\r\n}\r\nconst handleChange = (cityAction,fetchAction) => (e)=>{\r\n      let city = e.value\r\n      fetchAction(cityAction(city))\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n        return{\r\n        cityAction: city => cityAction(city),\r\n        fetchAction: (cityAction) => dispatch(fetchData(cityAction)) \r\n        }\r\n}\r\nconst mapStateToProp = (state) => {\r\n        return {isLoading:state.isLoadingData,city:state.city,}\r\n      }\r\nconst selectCity = connect(mapStateToProp,mapDispatchToProps)(React.memo(predicate_select_component))\r\n\r\nexport default selectCity","import {selectFromDateActionConstant} from '../constants/actionConstants' \r\n\r\nconst selectFromDateAction = (selectedDate) => () => {\r\n    return {type:selectFromDateActionConstant, date:selectedDate}\r\n}\r\nexport default selectFromDateAction","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport fromDateAction from '../actions/select_from_date_action'\r\nimport DatePicker from 'react-date-picker'\r\nimport fetchAction from '../actionCreators/weatherDataFetch'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nfunction date_picker_From_component({fromDateAction,fromDate,toDate,fetchAction}){\r\n    return(\r\n        <div id = 'datePickeroComponent' className='container'>\r\n           <div className=\"row\">\r\n           <div className=\"col-sm\">\r\n           <h1>From:</h1>\r\n            </div>\r\n               <div className=\"col-sm\">\r\n               <DatePicker \r\n                value={fromDate}\r\n                onChange={handleChange(fromDateAction,toDate,fetchAction)}\r\n                className=\"mt-3 col-md-12 col-offset-4\"\r\n                />\r\n           </div>\r\n           <hr/>\r\n        </div>\r\n      </div>\r\n)}\r\nconst handleChange = (action,toDate,fetchAction) => (fromDate) =>{\r\n    if(dateIsAfterTodate(fromDate,toDate))\r\n        alert('from date must be before to date')\r\n    else\r\n    fetchAction(action(fromDate))\r\n}\r\nconst dateIsAfterTodate = (fromdate,toDate)=>{\r\n    return (fromdate>=toDate)?true:false\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n    fromDateAction: date => fromDateAction(date),\r\n    fetchAction: (fromDateAction) => dispatch(fetchAction(fromDateAction)) \r\n    }\r\n}\r\nconst mapStateToProp = (state) => {\r\n    return {fromDate: state.fromDate, toDate:state.toDate}\r\n}\r\n\r\nconst selectFromDate = connect(mapStateToProp,mapDispatchToProps)(React.memo(date_picker_From_component))\r\n\r\nexport default selectFromDate","import {selectToDateActionConstant} from '../constants/actionConstants' \r\n\r\nconst selectToDateAction = (selectedDate) => () => {\r\n    return {type:selectToDateActionConstant, date:selectedDate}\r\n}\r\nexport default selectToDateAction","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport DatePicker from 'react-date-picker'\r\nimport toDateAction from '../actions/select_to_date_action'\r\nimport fetchAction from '../actionCreators/weatherDataFetch'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nfunction date_picker_To_component({toDate,toDateAction,fromDate,fetchAction}){\r\n    return(\r\n        <div id = 'datePickeroComponent' className='container'>\r\n           <div className=\"row\">\r\n           <div className=\"col-sm\">\r\n           <h1>To:</h1>\r\n            </div>\r\n               <div className=\"col-sm\">\r\n               <DatePicker \r\n                value={toDate}\r\n                onChange={handleChange(toDateAction,fetchAction,fromDate)}\r\n                className=\"mt-3 col-md-12 col-offset-4\"\r\n                />\r\n           </div>\r\n           <hr/>\r\n        </div>\r\n      </div>\r\n\r\n)\r\n    \r\n}\r\nconst handleChange=(action,fetchAction,fromDate)=>(toDate)=>{\r\n    if(dateIsBefore(fromDate,toDate))\r\n    alert('to date must be after from date')\r\n    else\r\n    fetchAction(action(toDate))\r\n}\r\nconst dateIsBefore = (fromDate,toDate) => {\r\n    return (fromDate>=toDate)?true:false\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    toDateAction: date => toDateAction(date),\r\n    fetchAction: (toDateAction) => dispatch(fetchAction(toDateAction)) \r\n    }\r\n}\r\nconst mapStateToProp = (state) => {\r\n    return {toDate: state.toDate, fromDate: state.fromDate}\r\n}\r\n\r\nconst selectFromDate = connect(mapStateToProp,mapDispatchToProps)(React.memo(date_picker_To_component))\r\n\r\nexport default selectFromDate","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport Table from 'react-bootstrap/Table'\r\nimport {daysBetween} from '../helpers/DateHelper'\r\n\r\nfunction history_component({fromDate,toDate,history}){\r\n        let numberOfDays = Math.round(daysBetween(fromDate,toDate))\r\n        return(\r\n            <div className=\"container\">\r\n            <Table>\r\n            <thead className=\"thead-dark\">\r\n              <tr scope=\"row\">\r\n                <th scope=\"col\">Mesaurement</th>\r\n                <th scope=\"col\">value, for {numberOfDays} days</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <th scope=\"row\">Highst Temprature</th>\r\n                <td>{history.highstTemp}</td>\r\n              </tr>\r\n              <tr>\r\n                <th scope=\"row\">Lowst Temprature</th>\r\n                <td>{history.lowstTemp}</td>\r\n              </tr>\r\n              <tr>\r\n                <th scope=\"row\">Total precip</th>\r\n                <td>{history.totalPrecip}</td>\r\n              </tr>\r\n              <tr>\r\n                <th scope=\"row\">Dominant wind direction</th>\r\n                <td>{history.dominantWindDirection}</td>\r\n              </tr>\r\n              <tr>\r\n                <th scope=\"row\">Average Cloud coverage</th>\r\n                <td>{history.avgCloudCov}</td>\r\n              </tr>\r\n              \r\n            </tbody>\r\n          </Table>\r\n          </div>\r\n        )\r\n}\r\n\r\nconst mapStateToProp = (state) => {\r\n  return {fromDate: state.fromDate, toDate:state.toDate, history:state.history}\r\n}\r\nconst History = connect(mapStateToProp)(React.memo(history_component))\r\n\r\nexport default History","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\n\r\nfunction twentyFour_hour_Prediction_component({twentyFourHoursPredicitions, toDate}){\r\n   \r\n   if(toDate<=Date.now())\r\n        return(\r\n          <div>Predictions or only available for date in the future, set To for a future date</div>\r\n        )\r\n   const items = []\r\n   for (const [index, value] of twentyFourHoursPredicitions.entries()) {\r\n      items.push(<tr key={index}>\r\n          <td>{value.hour}</td>\r\n          <td>{value.fromTemp}</td>\r\n          <td>{value.toTemp}</td>\r\n          <td>{value.fromPrecip}</td>\r\n          <td>{value.toPrecip}</td>\r\n          <td>{value.fromWind}</td>\r\n          <td>{value.toWind}</td>\r\n          <td>{value.fromCloud}</td>\r\n          <td>{value.toCloud}</td>\r\n      </tr>)\r\n    }\r\n  \r\n    return (\r\n        <div id=\"24predictions\">\r\n        <div className=\"container-fluid\"><h1>24hour predictions for {toDate.toDateString()}</h1></div>\r\n        <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th>Hour</th>\r\n            <th>Temp from</th>\r\n            <th>Temp to</th>\r\n            <th>Precip from</th>\r\n            <th>Precip to</th>\r\n            <th>Wind from</th>\r\n            <th>Wind to</th>\r\n            <th>Cloud Coverage from</th>\r\n            <th>Cloud Coverage to</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items}\r\n        </tbody>\r\n      </Table>\r\n      </div>\r\n        )\r\n}\r\n\r\nconst mapStateToProp = (state) => {\r\n  return {twentyFourHoursPredicitions:state.twentyFourHoursPredicitions, toDate:state.toDate}\r\n}\r\nconst TwentyFourHours = connect(mapStateToProp)(React.memo(twentyFour_hour_Prediction_component))\r\nexport default TwentyFourHours\r\n\r\n","import {dataType,nationalUnitOfMeasures} from '../constants/dataType'\r\nexport  function getUnitSymbol(unitOfMeasure,type)\r\n{   \r\n    console.log(type)\r\n    switch(type){\r\n        case dataType.temperature:\r\n            return getTempratureSymbol(unitOfMeasure)\r\n        case dataType.precipitation:\r\n            return getPrecipitationSymbol(unitOfMeasure)\r\n        case dataType.wind:\r\n            return getWindSymbol(unitOfMeasure)\r\n        case dataType.cloud:\r\n            return getCloudSymbol(unitOfMeasure)\r\n        default:\r\n             throw `unrecognized data type -> getUnitSymbol ${type}`\r\n    }\r\n\r\n}\r\n\r\nfunction getTempratureSymbol(unitOfMeasure)\r\n{\r\n    console.log(unitOfMeasure)\r\n    if(nationalUnitOfMeasures.us===unitOfMeasure)\r\n        return 'F'\r\n    else\r\n        return 'C'\r\n}\r\nfunction getPrecipitationSymbol(unitOfMeasure){\r\n    \r\n    if(nationalUnitOfMeasures.us===unitOfMeasure)\r\n        return 'Inches'\r\n    else\r\n        return 'mm'\r\n}\r\nfunction getWindSymbol(unitOfMeasure){\r\n    \r\n    if(nationalUnitOfMeasures.us===unitOfMeasure)\r\n        return 'MPH'\r\n    else\r\n        return 'm/s'\r\n}\r\nfunction getCloudSymbol(unitOfMeasure){\r\n    \r\n    return '%'\r\n}\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Select from 'react-select'\r\nimport { cityOptions, historyTypeOptions,unit } from '../constants/options'\r\nimport {addWeatherHistoryData} from '../models/fetch/WeatherHistoryService'\r\nimport {getUnitSymbol} from '../helpers/InputModelHelper'\r\nimport fetchAction from '../actionCreators/weatherDataFetch'\r\n\r\nfunction submit_History_Component({fetchAction}) {\r\n    return (\r\n        <div className='class=\"border border-dark'>\r\n            <form onSubmit={handleSubmit(fetchAction)} name='SubmitHistory' >\r\n                <div className='container' name='inputs'>\r\n                    <div className=\"row\">\r\n                        <div className='col mt-3 col-md-1 col-offset-4'>Type</div>\r\n                        <div className='col mt-3 col-md-3 col-offset-4'>City</div>\r\n                        <div className='col mt-3 col-md-1 col-offset-4'>Unit</div>\r\n                        <div className='col mt-3 col-md-3 col-offset-4'>Date</div>\r\n                        <div className='col mt-3 col-md-3 col-offset-4' >Value</div>\r\n                    </div>\r\n                    <div className='row'>  \r\n                    <div className='col mt-3 col-md-2 col-offset-4'>             \r\n                <Select\r\n                    name='type'\r\n                    options={historyTypeOptions}\r\n                /></div>\r\n                <div className='col mt-3 col-md-2 col-offset-4'>  \r\n                <Select\r\n                    name='city'\r\n                    options={cityOptions}\r\n                /> </div>\r\n                <div className='col mt-3 col-md-2 col-offset-4' >  \r\n                <Select\r\n                    name='unit'\r\n                    options={unit}\r\n                /></div>\r\n                <div className='col mt-3 col-md-3 col-offset-4'>  \r\n                <input \r\n                    type=\"datetime-local\" \r\n                    name='dateTime'\r\n                    max={new Date()}\r\n                    required\r\n                /></div>\r\n                <div className='col mt-3 col-md-2 col-offset-4'>  \r\n                <input type='number'\r\n                         name='value'\r\n                        required\r\n                        />\r\n                        </div>\r\n                </div>\r\n                </div>\r\n               <input \r\n                    type='submit' \r\n                    value='submit weather history' \r\n                    className=\"mt-3 col-md-2 col-offset-4\"\r\n                    onSubmit={handleSubmit(fetchAction)}\r\n                    />\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n}\r\nconst handleSubmit =  (fetchAction) => async (e) => {\r\n    e.preventDefault()\r\n    const place = e.target.city.value\r\n    const type = e.target.type.value\r\n    const unit = getUnitSymbol(e.target.unit.value,type)\r\n    const time = e.target.dateTime.value\r\n    const value = e.target.value.value\r\n   \r\n    \r\n    const wasPosted = await addWeatherHistoryData({place,type,unit,time,value})\r\n  \r\n        if(wasPosted)\r\n            fetchAction(()=>{return {type:'defaultAction'}})\r\n        else\r\n            alert('Data was not submitted to the server, due to error')\r\n   \r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n    fetchAction: (action) => dispatch(fetchAction(action))\r\n    }\r\n}\r\n\r\nconst submitHistory = connect(null,mapDispatchToProps)(React.memo(submit_History_Component))\r\n\r\nexport default submitHistory\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nfunction latest_component({latestData}){\r\n     \r\n     return(\r\n        <div className=\"container\">\r\n        <Table>\r\n        <thead className=\"thead-dark\">\r\n          <tr scope=\"row\">\r\n            <th scope=\"col\">Latest Mesaurement</th>\r\n            <th scope=\"col\">value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr scope=\"row\">\r\n            <th>Temprature</th>\r\n            <td>{latestData.temprature}</td>\r\n          </tr>\r\n          <tr scope=\"row\">\r\n            <th>precip</th>\r\n            <td>{latestData.precition}</td>\r\n          </tr>\r\n          <tr scope=\"row\">\r\n            <th>wind</th>\r\n            <td>{latestData.wind}</td>\r\n          </tr>\r\n          <tr scope=\"row\">\r\n            <th>Cloud coverage</th>\r\n            <td>{latestData.cloud}</td>\r\n          </tr>\r\n          \r\n        </tbody>\r\n      </Table>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProp = (state) => {\r\n    return {latestData:state.latestData}\r\n  }\r\n  \r\n  const Latest = connect(mapStateToProp)(React.memo(latest_component))\r\n  \r\n  export default Latest","import React from 'react';\r\nimport CityPredicateSelect from './components/Select_City_Predicate_component'\r\nimport DatePickerFrom from './components/DatePicker_From_component'\r\nimport DatePickerTo from './components/DatePicker_To_component'\r\nimport History from './components/History_component'\r\nimport TwentyFourHourPrediction from './components/TwentyFour_Hour_Predictions_component'\r\nimport SubmitHistory from './components/submit_history_component'\r\nimport Latest from './components/Latest_component'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <CityPredicateSelect/>\r\n     <DatePickerFrom/>\r\n     <DatePickerTo/>\r\n     <hr/>\r\n     <History/>\r\n     <hr/>\r\n      <Latest/>\r\n      <hr/>\r\n     <TwentyFourHourPrediction/>\r\n     <hr/>\r\n     <SubmitHistory/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {Provider} from 'react-redux'\r\nimport configurationStore from './store'\r\nimport './index.css'\r\nimport App from './App'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n<Provider store={configurationStore()}>\r\n<App/>\r\n</Provider>\r\n, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import {createStore, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport defaultState from './constants/defaultState'\r\nimport reducer from './reducers/Reducer'\r\n// import rootReducer from './reducers/rootReducer'\r\n\r\n\r\n\r\n\r\n\r\nexport default function configurationStore(initialState=defaultState){\r\nreturn createStore(\r\n        reducer,\r\n        initialState,\r\n        applyMiddleware(thunk)\r\n)\r\n}","export default class DateInterval{\r\n\r\n    constructor(fromDate, toDate){\r\n        \r\n        this.fromDate = fromDate.getTime()\r\n        this.toDate = toDate.getTime()\r\n    }\r\n\r\n    to(){return this.toDate}\r\n\r\n    from(){return this.fromDate}\r\n\r\n    contains(date){\r\n        const dateInt = Date.parse(date)\r\n        if (dateInt >= this.fromDate && dateInt <= this.toDate) \r\n                return true\r\n        return false\r\n    }\r\n\r\n}\r\n\r\n// module.exports = DateInterval\r\n\r\n","const DataAndEvent = require('./DataAndEvent')\r\n\r\n\r\nclass WeatherData extends DataAndEvent{\r\n\r\n        constructor(timeDate,placeString,typeString,unitString,valueNumeric){\r\n                super(timeDate,placeString,typeString,unitString)\r\n                this.valueNumeric = valueNumeric\r\n\r\n        }\r\n\r\n        value(){return this.valueNumeric}\r\n\r\n\r\n}\r\n\r\nmodule.exports = WeatherData","const DataAndEvent = require('./DataAndEvent')\r\n\r\n\r\nclass WeatherPrediction extends DataAndEvent {\r\n\r\n    constructor( timeDate, placeString, typeString, unitString,fromNumeric,toNumeric) {\r\n        super(timeDate, placeString, typeString, unitString)\r\n        this.fromNumeric = fromNumeric\r\n        this.toNumeric = toNumeric\r\n    }\r\n\r\n    mathches(weatherdata) {\r\n        return weatherdata.time().getTime() === this.timeDate.getTime() &&\r\n            weatherdata.place() === this.placeString &&\r\n            weatherdata.type() === this.typeString &&\r\n            weatherdata.unit() === this.unitString\r\n    }\r\n    toDelete(){\r\n        this.toDate = new Date(2000, 2, 2)\r\n    }\r\n    from(){return this.fromNumeric}\r\n    to(){return this.toNumeric}\r\n}\r\n\r\n\r\n\r\nmodule.exports = WeatherPrediction","const Temprature = require(\"./Temprature\")\r\nconst Precipitation = require(\"./Precipitation\")\r\nconst Wind = require(\"./Wind\")\r\nconst CloudCoverage = require(\"./CloudCoverage\")\r\nconst DateInterval = require(\"./DateInterval\")\r\n\r\nclass WeatherHistory {\r\n\r\n\r\n    constructor(dataInputArray = []) {\r\n\r\n        this.dataArray = dataInputArray\r\n\r\n    }\r\n    forPlace(place) {\r\n        let filtteredData =  this.dataArray.filter(elm => elm.place() === place)\r\n        return new WeatherHistory(filtteredData)\r\n\r\n    }\r\n    forType(type) {\r\n        let filtteredData =  this.dataArray.filter(elm => elm.type() === type)\r\n        return new WeatherHistory(filtteredData)\r\n    }\r\n    forPeriod(dateInterval) {\r\n        let filtteredData =  this.dataArray.filter(elm => dateInterval.contains(elm.time()))\r\n        return new WeatherHistory(filtteredData)\r\n    }\r\n    including(data){\r\n        return new WeatherHistory(this.dataArray.concat(data))\r\n    }\r\n    convertToUSUnits() {\r\n\r\n        this.dataArray.forEach(element => {\r\n          \r\n            switch (element.constructor) {\r\n                case Temprature: element.convertToF()\r\n                break; \r\n                case Precipitation: element.convertToInches()\r\n                break;\r\n                case Wind: element.convertToMPH()\r\n                break;\r\n                \r\n                default:break;\r\n            }\r\n\r\n        })\r\n        return this\r\n\r\n    }\r\n    convertToInternationalUnits() {\r\n\r\n        this.dataArray.forEach(element => {\r\n               \r\n            switch (element.constructor) {\r\n                case Temprature: element.convertToC()\r\n                break; \r\n                case Precipitation: element.convertToMM()\r\n                break; \r\n                case Wind: element.convertToMS()\r\n                break; \r\n                default:break; \r\n            }\r\n\r\n        })\r\n        return this\r\n    }\r\n    lowestValue(){\r\n        if(this.dataArray.length != 0)\r\n        return this.dataArray.sort((a,b) =>  a.value() - b.value())[0].value()\r\n    }\r\n\r\n    data() {\r\n        return this.dataArray\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nmodule.exports = WeatherHistory","const WeatherData = require('./WeatherData')\r\n\r\nclass Tempreature extends WeatherData{\r\n\r\n    constructor(timeDate, placeString, typeString, unitString, valueNumeric){\r\n        super(timeDate, placeString, typeString, unitString, valueNumeric)\r\n    }\r\n\r\n    convertToF(){\r\n            if(this.unitString===\"C\")\r\n            {\r\n                this.valueNumeric =  this.valueNumeric * 1.8 + 32 \r\n                this.unitString = \"F\"\r\n            }\r\n    }\r\n    convertToC(){\r\n            if(this.unitString ===\"F\")\r\n            {\r\n                this.valueNumeric = (this.valueNumeric - 32) / 1.8\r\n                this.unitString = \"C\"\r\n            }\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Tempreature"," class DataAndEvent{\r\n\r\n        constructor(timeDate,placeString,typeString,unitString)\r\n        {\r\n            this.timeDate = timeDate\r\n            this.placeString = placeString\r\n            this.typeString = typeString\r\n            this.unitString = unitString\r\n        }\r\n        type(){return this.typeString}\r\n        unit(){return this.unitString}\r\n        time(){return this.timeDate}\r\n        place(){return this.placeString}\r\n        \r\n}\r\n\r\nmodule.exports = DataAndEvent","const WeatherData = require('./WeatherData')\r\n\r\nclass Precipitation extends WeatherData{\r\n\r\n    constructor(timeDate, placeString, typeString, unitString, valueNumeric){\r\n        super(timeDate, placeString, typeString, unitString, valueNumeric)\r\n    }\r\n\r\n    //precipitation type omitted as type is already present\r\n\r\n    convertToInches(){\r\n                if(this.unitString===\"mm\"){\r\n                    this.valueNumeric = this.valueNumeric*0.0394\r\n                    this.unitString = \"Inches\"\r\n                }\r\n    }\r\n    convertToMM(){\r\n                if(this.unitString===\"Inches\"){\r\n                        this.valueNumeric = this.valueNumeric/0.0394\r\n                        this.unitString = \"mm\"\r\n                }\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Precipitation","const WeatherData = require('./WeatherData')\r\n\r\nclass Wind extends WeatherData {\r\n\r\n    constructor(timeDate, placeString, typeString, unitString, valueNumeric, directionString) {\r\n        super(timeDate, placeString, typeString, unitString, valueNumeric)\r\n\r\n        this.directionString = directionString\r\n    }\r\n\r\n    convertToMPH() {\r\n        if (this.unitString === \"m/s\") {\r\n           this.valueNumeric = this.valueNumeric * 2.2369\r\n            this.unitString = \"MPH\"\r\n        }\r\n\r\n    }\r\n    convertToMS() {\r\n        if (this.unitString === \"MPH\") {\r\n            this.valueNumeric = this.valueNumeric / 2.2369\r\n            this.unitString = \"m/s\"\r\n\r\n        }\r\n\r\n    }\r\n    direction() { return this.directionString }\r\n\r\n}\r\n\r\nmodule.exports = Wind","const WeatherData = require('./WeatherData')\r\n\r\nclass CloudCoverage extends WeatherData {\r\n\r\n    constructor(timeDate,placeString,typeString,unitString,valueNumeric){\r\n            super(timeDate,placeString,typeString,unitString,valueNumeric)\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = CloudCoverage","const WeatherPrediction = require('./WeatherPrediction')\r\n\r\nclass TempraturePrediction extends WeatherPrediction{\r\n        constructor(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric){\r\n\r\n            super(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric)\r\n        }\r\n\r\n        convertToF(){\r\n            if(this.unitString = \"C\")\r\n              {\r\n                this.fromNumeric = (this.fromNumeric*1.8)+32  \r\n                this.toNumeric =    (this.toNumeric*1.8)+32\r\n                this.unitString = \"F\"\r\n              }\r\n        \r\n        }\r\n        convertToC(){\r\n\r\n            if(this.unitString = \"F\")\r\n            {\r\n              this.fromNumeric = (this.fromNumeric-32)/1.8  \r\n              this.toNumeric =    (this.toNumeric-32)/1.8\r\n              this.unitString = \"C\"\r\n            }\r\n      \r\n\r\n        }\r\n\r\n\r\n}\r\n\r\nmodule.exports = TempraturePrediction","const WeatherPrediction = require('./WeatherPrediction')\r\n\r\nclass PrecipitationPrediction extends WeatherPrediction{\r\n\r\n    constructor(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric,typesStringArray){\r\n        super(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric)\r\n\r\n        this.typesStringArray = typesStringArray\r\n    }\r\n\r\n    types(){return this.typesStringArray}\r\n\r\n    convertToInches(){\r\n        if(this.unitString = \"mm\")\r\n        {\r\n          this.fromNumeric = this.fromNumeric/25.4\r\n          this.toNumeric =    this.toNumeric/25.4\r\n          this.unitString = \"Inches\"\r\n        }\r\n    }\r\n    convertToMM(){\r\n        if(this.unitString = \"Inches\")\r\n        {\r\n          this.fromNumeric = this.fromNumeric*25.4\r\n          this.toNumeric = this.toNumeric*25.4\r\n          this.unitString = \"mm\"\r\n        }\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = PrecipitationPrediction","const WeatherPrediction = require('./WeatherPrediction')\r\n\r\nclass WindPrediction extends WeatherPrediction{\r\n\r\n    constructor(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric,directionsStringArray){\r\n        super(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric)\r\n        this.directionsStringArray = directionsStringArray\r\n    }\r\n\r\n    directions(){return this.directionsStringArray}\r\n\r\n    convertToMPH(){ \r\n                if(this.unitString===\"m/s\")\r\n                {\r\n                    this.fromNumeric = this.fromNumeric*2.236936\r\n                    this.toNumeric = this.toNumeric*2.236936\r\n                    this.unitString = \"MPH\"\r\n                }\r\n    }\r\n    convertToMS(){\r\n        if(this.unitString===\"MPH\")\r\n        {\r\n            this.fromNumeric = this.fromNumeric/2.236936\r\n            this.toNumeric = this.toNumeric/2.236936\r\n            this.unitString = \"m/s\"\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = WindPrediction","const WeatherHistory = require(\"./WeatherHistory\")\r\nconst TempraturePrediction = require(\"./TempraturePrediction\")\r\nconst PrecipitationPrediction = require(\"./PrecipitationPrediction\")\r\nconst WindPrediction = require(\"./WindPrediction\")\r\n\r\nclass WeatherForecast {\r\n\r\n    constructor(dataInputArray = []) {\r\n\r\n        this.dataArray = dataInputArray\r\n\r\n    }\r\n\r\nforPlace(place) {\r\n    let filtteredData =  this.dataArray.filter(elm => elm.place() === place)\r\n    return new WeatherForecast(filtteredData)\r\n\r\n}\r\nforType(type) {\r\n    let filtteredData =  this.dataArray.filter(elm => elm.type() === type)\r\n    return new WeatherForecast(filtteredData)\r\n}\r\nforPeriod(dateInterval) {\r\n    let filtteredData =  this.dataArray.filter(elm => dateInterval.contains(elm.time()))\r\n    return new WeatherForecast(filtteredData)\r\n}\r\nincluding(data){\r\n    return new WeatherForecast(this.dataArray.concat(data))\r\n}\r\n\r\nconvertToUSUnits() {\r\n\r\n    this.dataArray.forEach(element => {\r\n      \r\n        switch (element.constructor) {\r\n            case TempraturePrediction: element.convertToF()\r\n            break; \r\n            case PrecipitationPrediction: element.convertToInches()\r\n            break;\r\n            case WindPrediction: element.convertToMPH()\r\n            break;\r\n            \r\n            default:break;\r\n        }\r\n\r\n    })\r\n    return this\r\n\r\n}\r\nconvertToInternationalUnits() {\r\n\r\n    this.dataArray.forEach(element => {\r\n           \r\n        switch (element.constructor) {\r\n            case TempraturePrediction: element.convertToC()\r\n            break; \r\n            case PrecipitationPrediction: element.convertToMM()\r\n            break; \r\n            case WindPrediction: element.convertToMS()\r\n            break; \r\n            default:break; \r\n        }\r\n\r\n    })\r\n    return this\r\n}\r\n\r\navarageFromValue(){\r\n    let total = 0\r\n    this.dataArray.forEach(i => total += i.from()) \r\n    return total / this.dataArray.length || 'No Data'\r\n}\r\n\r\navarageToValue(){\r\n    let total = 0\r\n    this.dataArray.forEach(i => total += i.to()) \r\n    return total / this.dataArray.length || 'No Data'\r\n}\r\n\r\ndata() {\r\n    return this.dataArray\r\n}\r\n\r\n}\r\n\r\nmodule.exports = WeatherForecast","const WeatherPrediction = require('./WeatherPrediction')\r\n\r\nclass CloudCoveragePrediction extends WeatherPrediction{\r\n\r\n    constructor(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric){\r\n\r\n        super(timeDate,placeString,typeString,unitString,fromNumeric,toNumeric)\r\n    }\r\n\r\n\r\n}\r\n\r\nmodule.exports = CloudCoveragePrediction"],"sourceRoot":""}